# Egress Proxy Configuration
# Enforces all external traffic through a controlled proxy with domain allow-list
---
apiVersion: v1
kind: Namespace
metadata:
  name: egress-system
  labels:
    name: egress-system
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: egress-proxy
  namespace: egress-system
  labels:
    app.kubernetes.io/name: egress-proxy
    app.kubernetes.io/component: proxy
---
# ConfigMap with domain allow-list and proxy configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: squid-config
  namespace: egress-system
  labels:
    app.kubernetes.io/name: egress-proxy
data:
  squid.conf: |
    # Squid proxy configuration with strict allow-list
    http_port 3128
    
    # Define allowed domains (customize for your environment)
    acl allowed_domains dstdomain .github.com
    acl allowed_domains dstdomain .githubusercontent.com
    acl allowed_domains dstdomain .docker.io
    acl allowed_domains dstdomain .gcr.io
    acl allowed_domains dstdomain .quay.io
    acl allowed_domains dstdomain .npmjs.org
    acl allowed_domains dstdomain .pypi.org
    acl allowed_domains dstdomain .kubernetes.io
    # Add your specific allowed API domains
    acl allowed_domains dstdomain .example-api.internal
    acl allowed_domains dstdomain .metrics-collector.internal
    
    # SSL/TLS ports
    acl SSL_ports port 443
    acl Safe_ports port 80
    acl Safe_ports port 443
    acl Safe_ports port 8080
    acl Safe_ports port 8443
    acl CONNECT method CONNECT
    
    # Security rules - deny unsafe ports
    http_access deny !Safe_ports
    http_access deny CONNECT !SSL_ports
    
    # Management access
    http_access allow localhost manager
    http_access deny manager
    
    # Allow only whitelisted domains
    http_access allow allowed_domains
    http_access deny all
    
    # Required headers enforcement
    request_header_access Idempotency-Key allow all
    request_header_access X-Tenant-ID allow all
    reply_header_access Retry-After allow all
    
    # Logging
    access_log stdio:/dev/stdout squid
    cache_log stdio:/dev/stdout
    
    # Disable caching for security
    cache deny all
    
    # Performance and security settings
    dns_v4_first on
    forwarded_for delete
    via off
    
    # Timeouts aligned with backpressure requirements
    forward_timeout 30 seconds
    connect_timeout 30 seconds
    read_timeout 30 seconds
    shutdown_lifetime 5 seconds
    
    # Error pages with canonical error codes
    error_directory /usr/share/squid/errors/en
    
    coredump_dir /var/spool/squid
---
# Deployment for Squid proxy with security constraints
apiVersion: apps/v1
kind: Deployment
metadata:
  name: egress-proxy
  namespace: egress-system
  labels:
    app.kubernetes.io/name: egress-proxy
    app.kubernetes.io/component: proxy
spec:
  replicas: 3
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: egress-proxy
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: egress-proxy
        app.kubernetes.io/component: proxy
        networking/egress-proxy: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3128"
    spec:
      serviceAccountName: egress-proxy
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: squid
        image: ubuntu/squid:6.6-24.04_stable
        imagePullPolicy: IfNotPresent
        ports:
        - name: proxy
          containerPort: 3128
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Squid needs write for cache/logs
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Only if needed for port binding
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        volumeMounts:
        - name: config
          mountPath: /etc/squid/squid.conf
          subPath: squid.conf
          readOnly: true
        - name: cache
          mountPath: /var/spool/squid
        - name: logs
          mountPath: /var/log/squid
        - name: tmp
          mountPath: /tmp
        env:
        - name: SQUID_CACHE_DIR
          value: "/var/spool/squid"
        - name: SQUID_LOG_DIR
          value: "/var/log/squid"
        livenessProbe:
          tcpSocket:
            port: proxy
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: proxy
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          tcpSocket:
            port: proxy
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: squid-config
          defaultMode: 0644
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - egress-proxy
              topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: egress-proxy
---
# Service for egress proxy
apiVersion: v1
kind: Service
metadata:
  name: egress-proxy
  namespace: egress-system
  labels:
    app.kubernetes.io/name: egress-proxy
    app.kubernetes.io/component: proxy
  annotations:
    service.kubernetes.io/topology-mode: Auto
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: egress-proxy
    app.kubernetes.io/component: proxy
  ports:
  - name: proxy
    port: 3128
    targetPort: 3128
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
# HorizontalPodAutoscaler for proxy scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: egress-proxy
  namespace: egress-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: egress-proxy
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: egress-proxy
  namespace: egress-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: egress-proxy
      app.kubernetes.io/component: proxy