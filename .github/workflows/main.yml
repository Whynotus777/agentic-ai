# .github/workflows/main.yml - Main CI/CD Pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: agentic-ai
  EKS_CLUSTER: agentic-ai-cluster

jobs:
  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

  # Code Quality
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
      
      - name: Run Black formatter
        run: black --check orchestrator/ api/ execution/ agent/
      
      - name: Run isort
        run: isort --check-only orchestrator/ api/ execution/ agent/
      
      - name: Run Flake8
        run: flake8 orchestrator/ api/ execution/ agent/
      
      - name: Run MyPy type checking
        run: mypy orchestrator/ api/ execution/ agent/
      
      - name: Run Bandit security linting
        run: bandit -r orchestrator/ api/ execution/ agent/

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        service: [orchestrator, api, execution, agent]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements/${{ matrix.service }}.txt
          pip install -r requirements/test.txt
      
      - name: Run pytest
        run: |
          pytest tests/${{ matrix.service }}/ \
            --cov=${{ matrix.service }} \
            --cov-report=xml \
            --cov-report=term \
            -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready
      
      - name: Run integration tests
        run: |
          pip install -r requirements/test.txt
          pytest tests/integration/ -v --tb=short
      
      - name: Collect logs on failure
        if: failure()
        run: docker-compose -f docker-compose.test.yml logs

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, integration-tests]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service:
          - orchestrator
          - api-gateway
          - agent-cpu
          - task-executor
          - control-plane
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/${{ matrix.service }}.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'container-scan.sarif'
      
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'container-scan.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.agentic-ai.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }}-staging --region ${{ env.AWS_REGION }}
      
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
      
      - name: Update ArgoCD Application
        run: |
          argocd app set agentic-ai-staging \
            --repo https://github.com/${{ github.repository }} \
            --revision ${{ github.sha }} \
            --helm-set image.tag=${{ github.sha }} \
            --grpc-web
      
      - name: Sync ArgoCD Application
        run: |
          argocd app sync agentic-ai-staging --grpc-web
          argocd app wait agentic-ai-staging --health --grpc-web
      
      - name: Run smoke tests
        run: |
          pip install -r requirements/test.txt
          pytest tests/smoke/ -v --staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.agentic-ai.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}
      
      - name: Create deployment manifest
        run: |
          cat > deployment.yaml <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: agentic-ai-production
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: https://github.com/${{ github.repository }}
              targetRevision: ${{ github.sha }}
              path: kubernetes
              helm:
                valueFiles:
                - values.production.yaml
                parameters:
                - name: image.tag
                  value: ${{ github.sha }}
            destination:
              server: https://kubernetes.default.svc
              namespace: agentic-ai
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
          EOF
      
      - name: Apply ArgoCD Application
        run: kubectl apply -f deployment.yaml
      
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/orchestrator -n agentic-ai --timeout=10m
          kubectl rollout status deployment/api-gateway -n agentic-ai --timeout=10m
      
      - name: Run production smoke tests
        run: |
          pip install -r requirements/test.txt
          pytest tests/smoke/ -v --production
      
      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@releases/v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: https://api.agentic-ai.com
          environment: production
          description: "Deployed version ${{ github.sha }}"

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run load tests
        run: |
          k6 run tests/performance/load_test.js \
            --vus 50 \
            --duration 5m \
            --out influxdb=https://metrics.agentic-ai.com/k6
      
      - name: Check performance thresholds
        run: |
          python tests/performance/check_thresholds.py

---
# .github/workflows/release.yml - Release Workflow
name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this release
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            - orchestrator: `${{ secrets.ECR_REGISTRY }}/agentic-ai/orchestrator:${{ github.ref_name }}`
            - api-gateway: `${{ secrets.ECR_REGISTRY }}/agentic-ai/api-gateway:${{ github.ref_name }}`
            - agent-cpu: `${{ secrets.ECR_REGISTRY }}/agentic-ai/agent-cpu:${{ github.ref_name }}`
            
            ## Deployment
            ```bash
            kubectl set image deployment/orchestrator orchestrator=${{ secrets.ECR_REGISTRY }}/agentic-ai/orchestrator:${{ github.ref_name }} -n agentic-ai
            ```
          draft: false
          prerelease: false

---
# argocd/application.yaml - ArgoCD Application
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: agentic-ai
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/your-org/agentic-ai
    targetRevision: HEAD
    path: kubernetes
    helm:
      valueFiles:
        - values.yaml
      parameters:
        - name: image.tag
          value: latest
  destination:
    server: https://kubernetes.default.svc
    namespace: agentic-ai
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  revisionHistoryLimit: 3

---
# .github/workflows/scheduled.yml - Scheduled Jobs
name: Scheduled Maintenance

on:
  schedule:
    # Daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  cleanup:
    name: Resource Cleanup
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Clean up old ECR images
        run: |
          # Keep only last 10 images for each repository
          for repo in orchestrator api-gateway agent-cpu task-executor control-plane; do
            aws ecr describe-images \
              --repository-name agentic-ai/$repo \
              --query 'sort_by(imageDetails,& imagePushedAt)[:-10].imageDigest' \
              --output text | \
              xargs -I {} aws ecr batch-delete-image \
                --repository-name agentic-ai/$repo \
                --image-ids imageDigest={}
          done
      
      - name: Clean up S3 artifacts older than 30 days
        run: |
          aws s3api list-objects-v2 \
            --bucket agentic-ai-artifacts \
            --query "Contents[?LastModified<='$(date -d '30 days ago' --iso-8601)'].Key" \
            --output text | \
            xargs -I {} aws s3 rm s3://agentic-ai-artifacts/{}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name agentic-ai-cluster --region us-east-1
      
      - name: Clean up completed Jobs
        run: |
          kubectl delete jobs -n agentic-ai --field-selector status.successful=1
          kubectl delete pods -n agentic-ai --field-selector status.phase=Succeeded
      
      - name: Clean up old PVCs
        run: |
          kubectl get pvc -n agentic-ai -o json | \
            jq -r '.items[] | select(.status.phase != "Bound") | .metadata.name' | \
            xargs -I {} kubectl delete pvc {} -n agentic-ai

  backup:
    name: Backup Critical Data
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Backup PostgreSQL
        run: |
          DATE=$(date +%Y%m%d_%H%M%S)
          kubectl exec -n agentic-ai postgres-0 -- \
            pg_dump -U agentic_user agentic > backup_$DATE.sql
          aws s3 cp backup_$DATE.sql s3://agentic-ai-backups/postgres/backup_$DATE.sql
          rm backup_$DATE.sql
      
      - name: Backup Redis
        run: |
          DATE=$(date +%Y%m%d_%H%M%S)
          kubectl exec -n agentic-ai redis-master-0 -- \
            redis-cli --rdb /tmp/dump.rdb BGSAVE
          sleep 10
          kubectl cp agentic-ai/redis-master-0:/tmp/dump.rdb redis_backup_$DATE.rdb
          aws s3 cp redis_backup_$DATE.rdb s3://agentic-ai-backups/redis/backup_$DATE.rdb
          rm redis_backup_$DATE.rdb

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run dependency audit
        run: |
          pip install safety
          safety check -r requirements/orchestrator.txt
          safety check -r requirements/api.txt
          safety check -r requirements/agent.txt
      
      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
      
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'agentic-ai'
          path: '.'
          format: 'ALL'
      
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

---
# Makefile - Development Helper
.PHONY: help build test deploy clean

help:
	@echo "Available commands:"
	@echo "  make build       - Build all Docker images"
	@echo "  make test        - Run all tests"
	@echo "  make deploy-dev  - Deploy to local k8s"
	@echo "  make clean       - Clean up resources"

build:
	docker-compose build

test:
	pytest tests/ -v --cov=.

deploy-dev:
	kubectl apply -f kubernetes/namespace.yaml
	kubectl apply -f kubernetes/

clean:
	docker-compose down -v
	kubectl delete namespace agentic-ai

lint:
	black orchestrator/ api/ execution/ agent/
	isort orchestrator/ api/ execution/ agent/
	flake8 orchestrator/ api/ execution/ agent/
	mypy orchestrator/ api/ execution/ agent/

security-scan:
	trivy fs .
	bandit -r orchestrator/ api/ execution/ agent/
	safety check