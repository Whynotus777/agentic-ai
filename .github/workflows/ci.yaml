name: CI/CD Pipeline with Supply Chain Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  COSIGN_EXPERIMENTAL: 1

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Needed for OIDC signing with Cosign
      security-events: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name: ${{ steps.image.outputs.image }}
      sbom-name: ${{ steps.sbom.outputs.sbom }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Install Syft for SBOM
        uses: anchore/sbom-action/download-syft@v0
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: Generate SBOM
        id: sbom
        run: |
          echo "Generating SBOM for image..."
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
          
          # Generate SBOM in multiple formats
          syft "${IMAGE_NAME}@${{ steps.build.outputs.digest }}" \
            -o spdx-json=sbom.spdx.json \
            -o cyclonedx-json=sbom.cyclonedx.json \
            -o table=sbom.txt
          
          # Also generate for source code
          syft dir:. -o spdx-json=sbom-source.json
          
          echo "SBOM generated successfully"
          echo "sbom=sbom.spdx.json" >> $GITHUB_OUTPUT
          
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-artifacts
          path: |
            sbom.spdx.json
            sbom.cyclonedx.json
            sbom.txt
            sbom-source.json
          retention-days: 90
          
      - name: Sign container image with Cosign
        id: sign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing image with Cosign..."
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          DIGEST="${{ steps.build.outputs.digest }}"
          
          # Sign the image with keyless signing (Sigstore)
          cosign sign --yes ${IMAGE}@${DIGEST}
          
          # Attach SBOM to image
          cosign attach sbom --sbom sbom.spdx.json ${IMAGE}@${DIGEST}
          
          # Sign the SBOM
          cosign sign --yes --attachment sbom ${IMAGE}@${DIGEST}
          
          # Generate and attach attestation
          cosign attest --yes --predicate sbom.spdx.json \
            --type spdxjson ${IMAGE}@${DIGEST}
            
          echo "Image signed successfully"
          
      - name: Verify signature (for demonstration)
        run: |
          echo "Verifying signature..."
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          DIGEST="${{ steps.build.outputs.digest }}"
          
          # Verify the signature
          cosign verify \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${IMAGE}@${DIGEST}
            
          # Verify SBOM signature
          cosign verify --attachment sbom \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${IMAGE}@${DIGEST}
            
          echo "‚úÖ Signature verification successful"
          
      - name: Print verification command
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          DIGEST="${{ steps.build.outputs.digest }}"
          
          echo "========================================="
          echo "üîê Image Signing Complete!"
          echo "========================================="
          echo ""
          echo "Image: ${IMAGE}@${DIGEST}"
          echo ""
          echo "To verify this image signature locally, run:"
          echo ""
          echo "cosign verify \\"
          echo "  --certificate-identity-regexp 'https://github.com/${{ github.repository }}/*' \\"
          echo "  --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' \\"
          echo "  ${IMAGE}@${DIGEST}"
          echo ""
          echo "To download and inspect the SBOM:"
          echo ""
          echo "cosign download sbom ${IMAGE}@${DIGEST} | jq ."
          echo ""
          echo "========================================="
          
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Store signatures in artifacts
        uses: actions/upload-artifact@v3
        with:
          name: signatures
          path: |
            *.sig
            *.pem
            *.pub
          retention-days: 90
          if-no-files-found: ignore
          
  validate-supply-chain:
    needs: build-and-sign
    runs-on: ubuntu-latest
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Validate signed image
        run: |
          echo "Validating supply chain..."
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          DIGEST="${{ needs.build-and-sign.outputs.image-digest }}"
          
          # Verify image signature
          cosign verify \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${IMAGE}@${DIGEST}
            
          echo "‚úÖ Supply chain validation successful"